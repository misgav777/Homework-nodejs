pipeline {
    agent any
    
    environment {
        KUBECONFIG = credentials('kubeconfig')
        GIT_CREDS_ID = credentials('GH_TOKEN_PSW')
        APP_NAME = "hw-app"
        AWS_ACCOUNT_ID = credentials('aws-account-id')
        AWS_REGION = 'ap-south-1'
        PRD_REPO = 'prd/hw-app'
        FULL_IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PRD_REPO}"
        GITOPS_REPO = 'https://github.com/misgav777/hw-k8s-config.git'
    }
    
    stages {
        stage("Check for Git Tag") {
            steps {
                script {
                    // Check if this commit has a tag
                    def tag = sh(returnStdout: true, script: "git tag --contains").trim()
                    
                    if (tag != null && tag != '') {
                        env.GIT_TAG = tag
                    } else {
                        env.GIT_TAG = ''
                    }
                    
                    echo "GIT_TAG is set to: ${env.GIT_TAG}"
                    env.IMAGE_TAG_RELEASE = "${FULL_IMAGE_NAME}:${GIT_TAG}"
                }
            }
        }
        
        stage('Setup') {
            steps {
                script {
                    // Install dependencies using npm
                    sh "npm install"
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    // Run tests with Jasmine
                    sh "npm test"
                    
                    // Generate code coverage report
                    sh "npm run coverage"
                    
                    // Archive the coverage report
                    archiveArtifacts artifacts: 'coverage/**', allowEmptyArchive: true
                }
            }
        }
        
        stage('Create Release') {
            when {
                expression {
                    return env.GIT_TAG == "" // Only run if GIT_TAG is not set
                }
            }
            steps {
                script {
                    sh 'printenv'
                    
                    // Extract version from package.json
                    def version = sh(returnStdout: true, script: "node -e \"console.log(require('./package.json').version)\"").trim()
                    def tag = "v${version}"
                    
                    // Create and push a new git tag
                    sh "git tag ${tag}"
                    sh "git push origin ${tag}"
                    
                    echo "Published new tag: ${tag}"
                }
            }
        }
        
        stage("Build and Deploy") {
            when {
                expression {
                    return env.GIT_TAG != "" // Only run if GIT_TAG is not empty
                }
            }
            
            stages {
                stage('Build and Push Image') {
                    steps {
                        script {
                            sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                            
                            // Build the Docker image
                            sh "docker build -t ${FULL_IMAGE_NAME}:${GIT_TAG} ."

                            // Push the Docker image to ECR
                            sh "docker push ${FULL_IMAGE_NAME}:${GIT_TAG}"
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            // Clean up workspace and Docker images
            sh 'docker system prune -f'
            deleteDir()
        }
    }
}