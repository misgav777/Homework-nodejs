name: Code Quality, Development, and Deployment

on:
  push:
    branches:
      - '**'
      - '!main'
permissions:
  id-token: write # This is required for requesting the JWT

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
        
      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: code coverage
        run: npm run coverage
      
      - name: Start server and test
        run: |
          npm start &
          sleep 5
          curl -sSf http://localhost:3000
          kill $(lsof -t -i:3000)
  
  Test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Docker compose up
        run: docker compose up -d

      - name: Wait for container to be ready
        run: |
          sleep 10  # Give the container time to initialize
          echo "Waiting for service to be ready..."

      - name: Run curl test
        run: curl -sSf http://localhost:80
      
      - name: Docker compose down
        run: docker compose down

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: docker build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: hw-app:${{ github.sha }}
          outputs: type=docker, dest=/tmp/hw-app.tar

      - name: load image
        run: docker load -i /tmp/hw-app.tar
      
      - name: Run trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: hw-app:${{ github.sha }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: CRITICAL
      
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::713881821143:role/GithubActionRole
          aws-region: ap-south-1
      
      - name: Longin to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push image to ECR
        run: |
          docker tag hw-app:${{ github.sha }} 713881821143.dkr.ecr.ap-south-1.amazonaws.com/stg/hw-app:${{ github.sha }}
          docker push 713881821143.dkr.ecr.ap-south-1.amazonaws.com/stg/hw-app:${{ github.sha }}
          
      - name: Update GitOps Repo
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global credential.helper '!f() { echo username=x-access-token; echo password=${{ secrets.PAT_TOKEN }}; }; f'
          git clone https://${{ secrets.PAT_TOKEN }}@github.com/misgav777/hw-k8s-config.git gitops
          cd gitops

          #update the image tag in the values.yaml file
          sed -i 's|tag:.*|tag: "${{ github.sha }}"|g' environments/stg/values.yaml
          
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"
          git add environments/stg/values.yaml
          git commit -m "Promote nodejs-app ${{ github.sha }} to staging"
          git push
          
          echo "ArgoCD will automatically deploy the changes to staging environment"

      
      - name: Verify Deployment Health
        id: verify-health
        run: |
          # Set your staging URL - replace with your actual URL
          STAGING_URL="http://af74b0db95df34fd7b944b072cf86d0f-86d24b8ace29a190.elb.ap-south-1.amazonaws.com/stg"
        
          # Make a simple health check request
          echo "Checking health endpoint at $STAGING_URL/health"
            
          # Try up to 5 times with 10 second delays between attempts
          MAX_ATTEMPTS=5
          ATTEMPT=0
          DELAY=10
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT+1))
          
          RESPONSE=$(curl -s $STAGING_URL/health)
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $STAGING_URL/health)
          
          if [ "$HTTP_STATUS" = "200" ]; then
              echo "Health check passed! Status code: $HTTP_STATUS"
              echo "health_check_passed=true" >> $GITHUB_OUTPUT
              break
          else
              echo "Health check failed (attempt $ATTEMPT/$MAX_ATTEMPTS). Status code: $HTTP_STATUS"
              echo "Waiting $DELAY seconds before retry..."
              sleep $DELAY
          fi
          done
          
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ] && [ "$HTTP_STATUS" != "200" ]; then
            echo "Health check failed after $MAX_ATTEMPTS attempts"
            echo "health_check_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi